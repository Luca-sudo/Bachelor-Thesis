
@article{hoffmann_two_2022,
	title = {Two decades of automatic amortized resource analysis},
	volume = {32},
	issn = {0960-1295, 1469-8072},
	url = {https://www.cambridge.org/core/product/identifier/S0960129521000487/type/journal_article},
	doi = {10.1017/S0960129521000487},
	abstract = {This article gives an overview of automatic amortized resource analysis (AARA), a technique for inferring symbolic resource bounds for programs at compile time. AARA has been introduced by Hofmann and Jost in 2003 as a type system for deriving linear worst-case bounds on the heap-space consumption of ﬁrst-order functional programs with eager evaluation strategy. Since then AARA has been the subject of dozens of research articles, which extended the analysis to different resource metrics, other evaluation strategies, non-linear bounds, and additional language features. All these works preserved the deﬁning characteristics of the original paper: local inference rules, which reduce bound inference to numeric (usually linear) optimization; a soundness proof with respect to an operational cost semantics; and the support of amortized analysis with the potential method.},
	language = {en},
	number = {6},
	urldate = {2023-05-23},
	journal = {Mathematical Structures in Computer Science},
	author = {Hoffmann, Jan and Jost, Steffen},
	month = jun,
	year = {2022},
	pages = {729--759},
	file = {Hoffmann and Jost - 2022 - Two decades of automatic amortized resource analys.pdf:/home/lazylambda/Zotero/storage/JV3SJR9J/Hoffmann and Jost - 2022 - Two decades of automatic amortized resource analys.pdf:application/pdf},
}

@book{hoffmann_types_2011,
	address = {Berlin},
	title = {Types with potential: polynomial resource bounds via automatic amortized analysis},
	isbn = {978-3-8442-1516-8},
	shorttitle = {Types with potential},
	language = {en},
	publisher = {epubli-Verl},
	author = {Hoffmann, Jan},
	year = {2011},
	file = {Hoffmann - 2011 - Types with potential polynomial resource bounds v.pdf:/home/lazylambda/Zotero/storage/EHEHAPPL/Hoffmann - 2011 - Types with potential polynomial resource bounds v.pdf:application/pdf},
}

@book{pierce_types_2002,
	address = {Cambridge, Mass},
	title = {Types and programming languages},
	isbn = {978-0-262-16209-8},
	language = {en},
	publisher = {MIT Press},
	author = {Pierce, Benjamin C.},
	year = {2002},
	keywords = {Programming languages (Electronic computers)},
	file = {Pierce - 2002 - Types and programming languages.pdf:/home/lazylambda/Zotero/storage/UR6HNYNP/Pierce - 2002 - Types and programming languages.pdf:application/pdf},
}

@book{nederpelt_type_2014,
	address = {Cambridge},
	title = {Type {Theory} and {Formal} {Proof}: {An} {Introduction}},
	isbn = {978-1-107-03650-5},
	url = {https://www.cambridge.org/core/books/type-theory-and-formal-proof/0472640AAD34E045C7F140B46A57A67C},
	abstract = {Type theory is a fast-evolving field at the crossroads of logic, computer science and mathematics. This gentle step-by-step introduction is ideal for graduate students and researchers who need to understand the ins and outs of the mathematical machinery, the role of logical rules therein, the essential contribution of definitions and the decisive nature of well-structured proofs. The authors begin with untyped lambda calculus and proceed to several fundamental type systems, including the well-known and powerful Calculus of Constructions. The book also covers the essence of proof checking and proof development, and the use of dependent type theory to formalise mathematics. The only prerequisite is a basic knowledge of undergraduate mathematics. Carefully chosen examples illustrate the theory throughout. Each chapter ends with a summary of the content, some historical context, suggestions for further reading and a selection of exercises to help readers familiarise themselves with the material.},
	publisher = {Cambridge University Press},
	author = {Nederpelt, Rob and Geuvers, Herman},
	year = {2014},
	doi = {10.1017/CBO9781139567725},
	file = {An elaborated example.pdf:/home/lazylambda/Zotero/storage/LVJEN2WW/An elaborated example.pdf:application/pdf;Definitions.pdf:/home/lazylambda/Zotero/storage/4BCNSTVX/Definitions.pdf:application/pdf;Extension of C with definitions.pdf:/home/lazylambda/Zotero/storage/9CJKJTV3/Extension of C with definitions.pdf:application/pdf;Flag-style natural deduction in D.pdf:/home/lazylambda/Zotero/storage/RULM3ISI/Flag-style natural deduction in D.pdf:application/pdf;Further perspectives.pdf:/home/lazylambda/Zotero/storage/888FMSZB/Further perspectives.pdf:application/pdf;Mathematics in D a first attempt.pdf:/home/lazylambda/Zotero/storage/RMP9QVQX/Mathematics in D a first attempt.pdf:application/pdf;Numbers and arithmetic in D.pdf:/home/lazylambda/Zotero/storage/4Z9GYTPZ/Numbers and arithmetic in D.pdf:application/pdf;Rules and properties of D.pdf:/home/lazylambda/Zotero/storage/PIHDHIJD/Rules and properties of D.pdf:application/pdf;Second order typed lambda calculus.pdf:/home/lazylambda/Zotero/storage/K4MF6NUJ/Second order typed lambda calculus.pdf:application/pdf;Sets and subsets.pdf:/home/lazylambda/Zotero/storage/RXZ8A435/Sets and subsets.pdf:application/pdf;Simply typed lambda calculus.pdf:/home/lazylambda/Zotero/storage/HPQVK9GG/Simply typed lambda calculus.pdf:application/pdf;The Calculus of Constructions.pdf:/home/lazylambda/Zotero/storage/MTU66YGQ/The Calculus of Constructions.pdf:application/pdf;The encoding of logical notions in C.pdf:/home/lazylambda/Zotero/storage/JRDX6CUC/The encoding of logical notions in C.pdf:application/pdf;Types dependent on terms.pdf:/home/lazylambda/Zotero/storage/B7N3CEXW/Types dependent on terms.pdf:application/pdf;Types dependent on types.pdf:/home/lazylambda/Zotero/storage/J2JWRG7C/Types dependent on types.pdf:application/pdf;Untyped lambda calculus.pdf:/home/lazylambda/Zotero/storage/Y9JFWFPW/Untyped lambda calculus.pdf:application/pdf},
}
